@using SquirrelsNest.Pecan.Client.Auth
@using Fluxor
@using SquirrelsNest.Pecan.Client.Shared
@using SquirrelsNest.Pecan.Client.Shared.Actions

<Fluxor.Blazor.Web.StoreInitializer/>

<AuthenticationProvider/>

@inject IActionSubscriber   ActionSubscriber;
@inject ISnackbar           Notifier;

@implements IDisposable

@code {
    private Snackbar ?      mNotifications;

    protected override void OnInitialized() {
        base.OnInitialized();

        Notifier.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;

        ActionSubscriber.SubscribeToAction<ApiCallStarted>( this, action => {
            mNotifications = Notifier.Add<ApiCallAnnouncement>( 
                new Dictionary<string, object>() {
                    { nameof( ApiCallAnnouncement.AnnouncementMessage ), action.AnnouncementMessage }
                },
                Severity.Info, 
                config => {
                    config.ActionColor = Color.Info;
                    config.HideIcon = true;
                    config.ShowCloseIcon = false;
                    config.RequireInteraction = false;
                    config.VisibleStateDuration = (int)TimeSpan.FromSeconds( 60 ).TotalMilliseconds;
                });
        } );

        ActionSubscriber.SubscribeToAction<ApiCallCompleted>( this, _ => {
            if( mNotifications != null ) {
                Notifier.Remove( mNotifications );

                mNotifications = null;
            }
        } );
    }

    public void Dispose() {
        ActionSubscriber.UnsubscribeFromAllActions( this );
    }
}
