@using Microsoft.AspNetCore.Components.Forms
@using Blazored.FluentValidation
@using Fluxor
@using Microsoft.AspNetCore.Components
@using SquirrelsNest.Pecan.Client.ProjectTemplates.Store
@using SquirrelsNest.Pecan.Shared.Dto.Projects
@using SquirrelsNest.Pecan.Shared.Entities

<EditForm Model="@Request" OnValidSubmit="@OnSubmit">
    <FluentValidationValidator/>
    <MudDialog>
        <DialogContent>
            <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                <MudTextField
                    T="string" 
                    Immediate="true"
                    Label="Project Name"
                    HelperText="Name for the project"
                    HelperTextOnFocus="true"
                    @bind-Value="@Request.Name"/>
                <ValidationMessage For="@(() => Request.Name)"/>
                <MudTextField
                    T="string"
                    Label="Description"
                    HelperText="Description for the project"
                    HelperTextOnFocus="true"
                    @bind-Value="@Request.Description"/>
                <ValidationMessage For="@(() => Request.Description)"/>
                <MudTextField
                    T="string"
                    Label="Issue Prefix"
                    HelperText="Characters used to prefix project issue numbers"
                    HelperTextOnFocus="true"
                    @bind-Value="@Request.IssuePrefix"/>
                <ValidationMessage For="@(() => Request.IssuePrefix)"/>
                <MudSelect
                    T="SnProjectTemplate"
                    ToStringFunc="@(t => t.TemplateName)"
                    Label="Project Template"
                    @bind-Value="@mTemplate">
                    <MudSelectItem Value="@NoTemplate"/>
                    @foreach( var template in TemplateState.Value.Templates ) {
                        <MudSelectItem Value="@template"/>
                    }
                </MudSelect>
            </MudFocusTrap>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Ok</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@inject ProjectTemplatesFacade          ProjectTemplates;
@inject IState<ProjectTemplatesState>   TemplateState;

@code {
    [CascadingParameter] 
    public MudDialogInstance ?                  MudDialog { get; set; }
    [Parameter]
    public CreateProjectRequest                 Request { get; set; } = new();

    private static readonly SnProjectTemplate   NoTemplate = new( "No Template", String.Empty );
    private SnProjectTemplate                   mTemplate = new ( NoTemplate.TemplateName, NoTemplate.TemplateDescription );

    protected override void OnInitialized() {
        base.OnInitialized();

        if(!TemplateState.Value.Templates.Any()) {
            ProjectTemplates.RequestProjectTemplates();
        }
    }

    private void OnSubmit() {
        if(!mTemplate.TemplateName.Equals( NoTemplate.TemplateName )) {
            Request.ProjectTemplateName = mTemplate.TemplateName;
        }

        MudDialog?.Close(DialogResult.Ok( Request ));
    }

    private void OnCancel() => MudDialog?.Cancel();
}
