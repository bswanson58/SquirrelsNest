@using Fluxor
@using SquirrelsNest.Pecan.Client.Issues.Store
@using SquirrelsNest.Pecan.Client.Issues.Support
@using SquirrelsNest.Pecan.Client.Projects.Store
@using SquirrelsNest.Pecan.Client.UserData.Store
@using SquirrelsNest.Pecan.Shared.Entities

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<style>
    .pagination-grid {
        display: grid;
        grid-template-columns: 1fr auto 4fr;
        grid-column-gap: 0;
    }
</style>

<MudContainer Class="ma-1 pa-0">
    @if( IssueState.Value.ApiCallInProgress ) {
        <MudText Class="ma-6" Typo="Typo.body1">Loading Project List</MudText>
    }
    else if( IssueState.Value.ApiCallMessage.Length > 0 ) {
        <MudText Class="ma-6" Typo="Typo.body1" Color="Color.Error">Error: @IssueState.Value.ApiCallMessage</MudText>
    }
    else {
        <MudStack Spacing="0">
            @foreach( var issue in mIssues ) {
                <IssueListItem Project="ProjectState.Value.CurrentProject" Issue="@issue" />
            }
        </MudStack>
        @if( mPaginationInformation.ShouldDisplay ) {
            <MudContainer Class="pagination-grid mt-4 pa-0">
                <MudContainer Class="pa-0"/>
                <MudContainer Class="pa-0">
                    <MudPagination Count="@mPaginationInformation.PageCount" @bind-Selected="@SelectedPage" />
                </MudContainer>
                <MudContainer Class="pa-0" />
            </MudContainer>
        }
    }
</MudContainer>

@inject IState<ProjectState>    ProjectState;
@inject IState<IssueState>      IssueState;
@inject IssueFacade             IssueFacade;
@inject IIssueRetriever         IssueRetriever;

@code {
    private List<SnCompositeIssue>  mIssues = new ();
    private PaginationInformation   mPaginationInformation = new ();

    protected override void OnInitialized() {
        base.OnInitialized();

        UpdateIssueList();

        IssueRetriever.OnIssueListChanged += OnIssueListChanged;
    }

    private void OnIssueListChanged( object sender, EventArgs args ) {
        UpdateIssueList();
    }

    private void UpdateIssueList() {
        mIssues.Clear();
        mIssues.AddRange( IssueRetriever.IssueList());

        mPaginationInformation = IssueRetriever.PaginationInformation;

        StateHasChanged();
    }

    private int SelectedPage {
        get => (int)IssueState.Value.CurrentDisplayPage;
        set => IssueFacade.SetIssueListPage( (uint)value );
    }

    protected override void Dispose( bool disposing ) {
        base.Dispose( disposing );

        IssueRetriever.OnIssueListChanged -= OnIssueListChanged;
    }
}
